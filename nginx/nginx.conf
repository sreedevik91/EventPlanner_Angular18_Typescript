# server {
#     listen 80;

#     location / {
#         proxy_pass http://frontend:4200;
#         proxy_set_header Host $host;
#     }

#     location /api/ {
#         proxy_pass http://api-gateway:4000/;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#         proxy_set_header Host $host;
#     }

#     location /socket.io/ {
#         proxy_pass http://chat-service:3005;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#         proxy_set_header Host $host;
#     }
# }


# =========================================================================================


# # /etc/nginx/nginx.conf

# events {}

# # Main HTTP context
# http {
#    # Docker's internal DNS(127.0.0.11) allows dynamic service discovery.
#   resolver 127.0.0.11 valid=30s; 

#   # Server block for handling requests

#   server {
#     listen 80;
#     # Explicitly define IPv4 and IPv6 listeners
#     listen [::]:80;

#     # Proxy frontend requests (Angular)
#     location / {
#       # proxy_pass http://frontend:4200;
#       proxy_pass http://frontend:80;
#       proxy_set_header Host $host;
#     }

#     # Proxy API gateway requests
#     location /api/ {
#       proxy_pass http://api-gateway:4000/;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection "Upgrade";
#       proxy_set_header Host $host;
#     }

#     # Proxy WebSocket requests (chat service)
#     location /socket.io/ {
#       proxy_pass http://chat-service:3005;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection "Upgrade";
#       proxy_set_header Host $host;
#     }
#   }
# }

# ==================================================================================

# events {}
# http {
#   include /etc/nginx/mime.types;  # ‚Üê Critical for CSS/JS MIME types
#   server {
#     listen 80;
#     listen [::]:80;
#     server_name localhost;

#     # Serve Angular static files directly
#     root /usr/share/nginx/html; # Angular static files
#     index index.html;

#     location / {
#       try_files $uri $uri/ /index.html;  # Handle client-side routing
#     }

#     # Proxy API requests to api-gateway
#     location /api/ {

#     # # üëá Strip /api from the path before forwarding
#     #  rewrite ^/api/(.*) /$1 break;

#     add_header 'Access-Control-Allow-Origin' 'http://localhost';
#     #  add_header 'Access-Control-Allow-Origin' $http_origin always;
#     #  add_header 'Access-Control-Allow-Origin' '*' always;
#      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH ,DELETE, OPTIONS' always;
#      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type, X-Requested-With' always;
#      add_header 'Access-Control-Allow-Credentials' 'true' always;


#    #  Handle preflight requests
#       if ($request_method = 'OPTIONS') {
#         #  add_header 'Access-Control-Allow-Origin' $http_origin always;
#         # #  add_header 'Access-Control-Allow-Origin' '*' always;
#         #  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH ,DELETE, OPTIONS' always;
#         #  add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type, X-Requested-With' always;
#         #  add_header 'Access-Control-Allow-Credentials' 'true' always;
#         #  add_header 'Content-Length' 0;
#         #  add_header 'Content-Type' 'text/plain; charset=utf-8';
#          return 204;
#       }


#     # Proxy other requests to API Gateway
#       proxy_pass http://api-gateway:4000;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#       # üëá Order matters! Set Origin AFTER other headers to avoid overrides
#       proxy_set_header Origin $http_origin;   # üëà Preserve origin

       
#       # proxy_set_header Access-Control-Request-Method $request_method;
#       # proxy_set_header Access-Control-Request-Headers $http_access_control_request_headers;
    

   

#        # CORS Headers (if needed)
#       # add_header "Access-Control-Allow-Origin" "http://localhost" always;
#       # add_header "Access-Control-Allow-Methods" "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
#       # add_header "Access-Control-Allow-Credentials" "true" always;
#       # add_header "Access-Control-Allow-Headers" "Content-Type, Authorization, X-Requested-With" always;
#     }

#     location /api/service/uploads/ {
#       proxy_pass http://services-service:3002/uploads/;
#     }

#     location /api/event/uploads/ {
#       proxy_pass http://event-service:3003/uploads/;
#     }

#     # location /user/auth/ {
#     #  proxy_pass http://api-gateway:4000/user/auth;
#     #  proxy_set_header Host $host;
#     #  proxy_set_header Origin $http_origin;
#     # }
#     # Proxy WebSocket
#     location /socket.io/ {
#       proxy_pass http://chat-service:3005;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection "Upgrade";
#       proxy_set_header Host $host;
#       # proxy_set_header Origin $http_origin; # üëà Preserve origin
      
#     # proxy_set_header Access-Control-Allow-Origin $http_origin;
#     # proxy_set_header Access-Control-Allow-Credentials true;

#        # CORS Headers (if needed)
#       add_header "Access-Control-Allow-Origin" $http_origin always;
#       add_header "Access-Control-Allow-Methods" "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
#       # add_header "Access-Control-Allow-Credentials" "true" always;
#       # add_header "Access-Control-Allow-Headers" "Content-Type, Authorization, X-Requested-With" always;
#     }
#      # Explicitly handle favicon to avoid loops
#     location = /favicon.ico {
#       log_not_found off;
#       access_log off;
#     }
#   }
# }


# ==================================================================================


# events {}
# http {
#   include /etc/nginx/mime.types;
#   server {
#     listen 80;
#     listen [::]:80;
#     server_name localhost;

#     # CORS headers for all responses
#     add_header 'Access-Control-Allow-Origin' $http_origin always;
#     add_header 'Access-Control-Allow-Credentials' 'true' always;
#     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
#     add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

#     root /usr/share/nginx/html;
#     index index.html;

#     location / {
#       try_files $uri $uri/ /index.html;
#     }

#     # API Proxy
#     location /api/ {
#       proxy_pass http://api-gateway:4000/;
      
#       # Standard headers
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#       proxy_set_header Origin $http_origin;

#       # Preflight handling
#       if ($request_method = OPTIONS) {
#         add_header 'Access-Control-Max-Age' 1728000;
#         add_header 'Content-Type' 'text/plain; charset=utf-8';
#         return 204;
#       }
#     }

#     # WebSocket Proxy
#     location /socket.io/ {
#       proxy_pass http://chat-service:3005;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection "Upgrade";
#       proxy_set_header Host $host;
#       # Remove CORS headers - not needed for WebSockets
#     }

#     location = /favicon.ico {
#       log_not_found off;
#       access_log off;
#     }
#   }
# }


# ==================================================================================

# events {}
# http {
#   include /etc/nginx/mime.types;

#   server {
#     listen 80;
#     listen [::]:80;
#     server_name localhost;

#     # Angular static files
#     root /usr/share/nginx/html;
#     index index.html;

#   # Block direct access to API Gateway port
#   location = /api/user/login {
#     if ($http_referer ~* "localhost:4000") {
#       return 403;
#     }
#   }

#     location / {
#       try_files $uri $uri/ /index.html;
#     }

#     # API Gateway configuration
#     location /api/ {

#   # Strip /api prefix before proxying
#   rewrite ^/api/(.*) /$1 break;

#       # Handle preflight requests FIRST
#       if ($request_method = 'OPTIONS') {
#         # add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
#         add_header 'Access-Control-Allow-Origin' $http_origin always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
#         add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
#         add_header 'Access-Control-Max-Age' 1728000 always;
#         return 204;
#       }

    
#       # Proxy configuration
#       proxy_pass http://api-gateway:4000;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#       # proxy_set_header Origin $http_origin;
#       proxy_set_header Origin ''; # Clear Origin to avoid downstream issues


#         # Regular request headers
#       # add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
#       add_header 'Access-Control-Allow-Origin' $http_origin always;
#       add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
#       add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
#       add_header 'Access-Control-Allow-Credentials' 'true' always;
#       add_header 'Access-Control-Expose-Headers' 'Authorization' always;

#   #       # Nuclear header cleansing
#   # proxy_hide_header 'Access-Control-Allow-Origin';
#   # proxy_hide_header 'Access-Control-Allow-Methods';
#   # proxy_hide_header 'Access-Control-Allow-Headers';
#   # proxy_hide_header 'Vary'; 
#     }

#     # Uploads and WebSocket locations
#     location /api/service/uploads/ {
#       proxy_pass http://services-service:3002/uploads/;
#     }

#     location /api/event/uploads/ {
#       proxy_pass http://event-service:3003/uploads/;
#     }

#     location /socket.io/ {
#       proxy_pass http://chat-service:3005;
#       proxy_http_version 1.1;
#       proxy_set_header Upgrade $http_upgrade;
#       proxy_set_header Connection "Upgrade";
#       proxy_set_header Host $host;
#       add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
      
#   add_header 'Access-Control-Allow-Credentials' 'true' always;
#     }

#     location = /favicon.ico {
#       log_not_found off;
#       access_log off;
#     }

#     # Add logging
#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log warn;
#   }
# }

# ==================================================================================
# last updated

events {}
http {
  include /etc/nginx/mime.types;

  server {
    listen 80;
    listen [::]:80;
    server_name localhost;

    # Angular static files
    root /usr/share/nginx/html;
    index index.html;

    location / {
      try_files $uri $uri/ /index.html;
    }

  

location /api/ {
  proxy_pass http://api-gateway:4000;
  proxy_set_header Host $host;

  # CORS Headers
  # add_header 'Access-Control-Allow-Origin' $http_origin always;
  add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
  add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
  add_header 'Access-Control-Allow-Credentials' 'true' always;

  # Preflight
  if ($request_method = 'OPTIONS') {
    return 204;
  }
}


    # WebSocket location
    location /socket.io/ {
      # proxy_pass http://chat-service:3005;
      proxy_pass http://api-gateway:4000;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      # No CORS headers needed for WebSockets
    }

    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
  }
}